#! /bin/sh
# Copyright (c) 2007, Novell Inc.
#
# Author: adrian@suse.de
#
# /etc/init.d/obssrcserver
#   and its symbolic  link
# /usr/sbin/rcobssrcserver
#
### BEGIN INIT INFO
# Provides:          obssrcserver
# Required-Start:    $time $syslog
# Required-Stop:     $null
# Should-Start:      $network $remote_fs obsstoragesetup slpd obsapisetup
# Should-Stop:       $none
# Default-Start:     3 5
# Default-Stop:      0 1 2 4 6
# Description:       open build service source repository server
### END INIT INFO



. /etc/sysconfig/obs-server

# Determine the base and follow a runlevel link name.
base=${0##*/}
link=${base#*[SK][0-9][0-9]}

if [ -z "$OBS_RUN_DIR" ]; then
        OBS_RUN_DIR="/srv/obs/run"
fi

if [ -z "$OBS_LOG_DIR" ]; then
        OBS_LOG_DIR="/srv/obs/log"
fi

if [ -n "$OBS_BACKENDCODE_DIR" ]; then
	obsdir="$OBS_BACKENDCODE_DIR"
else
	obsdir=/usr/lib/obs/server/
fi
rundir="$OBS_RUN_DIR"
logdir="$OBS_LOG_DIR"


case "$1" in
	start)
		echo -n "Initializing obssrcserver"
		mkdir -p "$rundir" "$logdir"
		chown obsrun:obsrun "$logdir" "$rundir"
                # FIXME: not nice, this should receive a proper daemon handling, 
                #        including real logging, pid file and startproc
		#startproc -l "$logdir"/src_server.log "$obsdir"/bs_srcserver
                "$obsdir"/bs_srcserver >> "$logdir"/src_server.log 2>&1 &

		# FIXME:

		# We'd need to wait for the sockets to come up, or for
		# some other interaction between the server and the
		# start script, or the server should fork itself into
		# background _after_ the sockets are up and the server
		# is reachable.

		# until then a little ugly nap does the trick...
		sleep 4

	;;
	stop)
		echo -n "Shutting down obssrcserver"
		"$obsdir"/bs_srcserver --stop

	;;
	restart)
		## If first returns OK call the second, if first or
		## second command fails, set echo return value.
		"$obsdir"/bs_srcserver --restart

	;;
	try-restart)
		$0 status
		if test $? = 0; then
			$0 restart
		fi
		# Remember status and be quiet

	;;
	reload)
		$0 status
                if test $? = 0; then
		        "$obsdir"/bs_srcserver --restart
		fi

	;;
	status)
		echo "Checking for obssrcserver and running processes: "
		"$obsdir"/bs_serverstatus "$OBS_RUN_DIR"/bs_srcserver.status
		#checkproc "$obsdir"/bs_srcserver

	;;
	*)
		echo "Usage: $0 {start|stop|status|try-restart|restart|reload}"
		exit 1
	;;
esac

